<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="PAYF0070">
<!--
/* ******************************************************************************
     작 성 자 : 김준수
     작 성 일 : 2016. 9. 12
     내    용 : 퇴직추계액 데이터 처리 SQLMAP
******************************************************************************* */
-->
    <select id="PAYF0070.SEARCH00" parameterClass="hashmap" resultClass="hashmap">
    <![CDATA[
            SELECT /* PAYF0070.SEARCH00 퇴직추계액 데이터 조회 */
                   SF_GET_SECTNAME(C.DEPT_CODE) AS SECT_NAME /* 부실명 */
                 , SF_GET_DEPTNAME(C.DEPT_CODE) AS DEPT_NAME /* 부서명 */
                 , SF_GET_COMMNAME('OPOS_CODE', C.OPOS_CODE) AS OPOS_NAME   /* 직위 */
                 , SF_GET_COMMNAME('CPOS_CODE', C.CPOS_CODE) AS CPOS_NAME   /* 직급 */
                 , A.EMPL_NUMB  /* 사원번호 */
                 , C.EMPL_NAME  /* 사원명 */
                 , A.ENCO_DATE  /* 입사일 */
                 , A.RCKN_DATE  /* 기산일 */
                 , A.CWRK_YCNT  /* 근속년수 */
                 , A.CWRK_MCNT  /* 근속월수 */
                 , A.CWRK_DCNT  /* 근속일수 */
                 , NVL(A.PAYX_RATE, 0) AS PAYX_RATE  /* 지급율 */
                 , NVL(A.AVER_WAGE, 0) AS AVER_WAGE  /* 평균임금 */
                 , NVL(A.RETI_ALWN, 0) AS RETI_ALWN  /* 퇴직충당금 */
                 , NVL(A.BEFO_ALWN, 0) AS BEFO_ALWN  /* 이전충당금 */
                 , NVL(A.OCUR_ALWN, 0) AS OCUR_ALWN  /* 발생충당금 */
                 , A.PAYX_YSNO  /* 지급대상여부 */
                 , SF_GET_COMMNAME('REEP_DIVC', A.REEP_DIVC) AS REEP_NAME /* 퇴직수당구분 */
                 , A.STDS_DATE  /* 기준일 */
                 , A.ENFC_CODE  /* 사업장코드 */
                 , NVL(A.WAGE_TAMT, 0) AS WAGE_TAMT  /* 급여계 */
                 , NVL(A.BONU_TAMT, 0) AS BONU_TAMT  /* 상여계 */
                 , NVL(A.ANVA_TAMT, 0) AS ANVA_TAMT  /* 연차수당합계 */
                 , NVL(A.AVEW_AMOT, 0) AS AVEW_AMOT  /* 평균급여액 */
                 , NVL(A.AVBN_AMOT, 0) AS AVBN_AMOT  /* 평균상여액 */
                 , NVL(A.AVAV_AMOT, 0) AS AVAV_AMOT  /* 평균연차수당액 */
                 , NVL( TO_NUMBER(SF_GET_COMMNAMEREF('RETR_RATE', A.EMPL_NUMB, '1')), 1 ) AS  RETR_RATE   /* 2016-12-06 LYG 퇴직연금배수 */
              FROM PY_RTRESE A
        INNER JOIN TABLE(SF_HR_MASTXM(A.EMPL_NUMB, #STDS_DATE#)) C
                ON A.EMPL_NUMB = C.EMPL_NUMB
         LEFT JOIN TABLE(SF_TM_DEPTXM(#STDS_DATE#)) D
                ON C.DEPT_CODE = D.DEPT_CODE
         LEFT JOIN TM_CODEXD E
                ON C.CPOS_CODE = E.COMD_CODE
               AND E.COMM_CODE = 'CPOS_CODE'
         LEFT JOIN PY_MASTPM F
                ON A.EMPL_NUMB = F.EMPL_NUMB
             WHERE A.STDS_DATE = #STDS_DATE#
    ]]>
    <isNotEmpty prepend="AND" property="DEPT_CODE">
                   D.DEPT_FCOD LIKE SF_GET_DEPTFCOD(#DEPT_CODE#, #STDS_DATE#) || '%'
    </isNotEmpty>
    <isNotEmpty prepend="AND" property="EMPL_NUMB">
                   A.EMPL_NUMB = #EMPL_NUMB#
    </isNotEmpty>
    <isNotEmpty prepend="AND" property="PAYX_YSNO">
                   A.PAYX_YSNO = #PAYX_YSNO#
    </isNotEmpty>
    <isNotEmpty prepend="AND" property="REEP_DIVC">
                   A.REEP_DIVC = #REEP_DIVC#
    </isNotEmpty>
    <isNotEmpty prepend="AND" property="ENFC_CODE">
                   A.ENFC_CODE = #ENFC_CODE#
    </isNotEmpty>
          ORDER BY D.DEPT_FCOD
                 , E.SORT_ORDR
                 , C.PRON_DATE
                 , C.ENCO_DATE
    </select>

<!--
/* ******************************************************************************
     작 성 자 : 김준수
     작 성 일 : 2016. 9. 12
     내    용 : 퇴직추계액 테이블 조회
******************************************************************************* */
-->
    <select id="PAYF0070.SEARCH01" parameterClass="hashmap" resultClass="hashmap">
    <![CDATA[
            SELECT /* PAYF0070.SEARCH01 추계액 산출 급여 */
               A.STDS_DATE   /* 기준일 */
             , A.EMPL_NUMB   /* 직원번호 */
             , A.ENFC_CODE   /* 사업장코드 */
             , B.REUD_CODE   /* 급상여구분 */
             , B.EXPD_CODE   /* 수당코드 */
             , NVL(B.PAYX_AMOT, 0) AS PAYX_AMOT   /* 수당액 */
             , C.EXPD_NAME
          FROM PY_RTRESE A
            INNER JOIN PY_RTRPAY B
               ON A.STDS_DATE = B.STDS_DATE
              AND A.EMPL_NUMB = B.EMPL_NUMB
              AND A.ENFC_CODE = B.ENFC_CODE
             LEFT OUTER JOIN PY_ALLDED C
               ON B.EXPD_CODE = C.EXPD_CODE
             LEFT OUTER JOIN HR_MASTXM D
               ON A.EMPL_NUMB = D.EMPL_NUMB
             LEFT OUTER JOIN VI_DEPTXM E
               ON D.DEPT_CODE = E.DEPT_CODE
         WHERE B.REUD_CODE = '2'
           AND A.STDS_DATE = #STDS_DATE#
           AND A.EMPL_NUMB = #EMPL_NUMB#
         ORDER BY C.SORT_ORDR
    ]]>
    </select>

    <!--
/* ******************************************************************************
     작 성 자 : 김준수
     작 성 일 : 2016. 9. 12
     내    용 : 퇴직추계액 테이블 조회
******************************************************************************* */
-->
    <select id="PAYF0070.SEARCH02" parameterClass="hashmap" resultClass="hashmap">
    <![CDATA[
            SELECT  /* PAYF0070.SEARCH02 추계액 산출 상여 */
               A.STDS_DATE                          /* 기준일 */
             , A.EMPL_NUMB                          /* 직원번호 */
             , A.ENFC_CODE                          /* 사업장코드 */
             , B.REUD_CODE                          /* 급상여구분 */
             , B.EXPD_CODE                          /* 수당코드 */
             , NVL(B.PAYX_AMOT, 0) AS PAYX_AMOT     /* 수당액 */
             , C.EXPD_NAME
          FROM PY_RTRESE A
            INNER JOIN PY_RTRPAY B
               ON A.STDS_DATE = B.STDS_DATE
              AND A.EMPL_NUMB = B.EMPL_NUMB
              AND A.ENFC_CODE = B.ENFC_CODE
             LEFT OUTER JOIN PY_ALLDED C
               ON B.EXPD_CODE = C.EXPD_CODE
             LEFT OUTER JOIN HR_MASTXM D
               ON A.EMPL_NUMB = D.EMPL_NUMB
             LEFT OUTER JOIN VI_DEPTXM E
               ON D.DEPT_CODE = E.DEPT_CODE
         WHERE B.REUD_CODE = '3'
           AND A.STDS_DATE = #STDS_DATE#
           AND A.EMPL_NUMB = #EMPL_NUMB#
         ORDER BY C.SORT_ORDR
    ]]>
    </select>

        <!--
     작 성 자 : 김준수
     작 성 일 : 2016.09.12
     내    용 : 추계 수정
     파라미터 :
    -->
    <update id="PAYF0070.UPDATE00" parameterClass="hashmap">
    <![CDATA[
        UPDATE PY_RTRESE /* PAYF0070.UPDATE00 퇴직추계액 수정 */
           SET WAGE_TAMT = #WAGE_TAMT#   /* 급여합계 */
             , BONU_TAMT = #BONU_TAMT#   /* 상여합계 */
             , AVER_WAGE = #AVER_WAGE#   /* 평균임금 */
             , CWRK_YCNT = #CWRK_YCNT#   /* 근속년수 */
             , CWRK_MCNT = #CWRK_MCNT#   /* 근속월수 */
             , CWRK_DCNT = #CWRK_DCNT#   /* 근속일수 */
             , PAYX_RATE = #PAYX_RATE#   /* 지급율 */
             , BEFO_ALWN = #BEFO_ALWN#   /* 이전충당금 */
             , RETI_ALWN = #RETI_ALWN#   /* 퇴직충당금 */
             , OCUR_ALWN = #OCUR_ALWN#   /* 발생충당금 */
             , ENCO_DATE = #ENCO_DATE#   /* 입사일 */
             , RCKN_DATE = #RCKN_DATE#   /* 기산일 */
             , PAYX_YSNO = #PAYX_YSNO#   /* 지급여부 */
             , REEP_DIVC = #REEP_DIVC#   /* 퇴직수당구분코드 */
             , UPDT_USID = #UPDT_USID#   /* 수정작업자 */
             , UPDT_DATE = SYSDATE       /* 수정일시 */
         WHERE STDS_DATE = #STDS_DATE#   /* 기준일 */
           AND EMPL_NUMB = #EMPL_NUMB#   /* 사원번호 */
           AND ENFC_CODE = #ENFC_CODE#   /* 사업장코드 */
    ]]>
    </update>

    <!--
     작 성 자 : 김준수
     작 성 일 : 2016.09.12
     내    용 : 급여 수정
     파라미터 :
    -->
    <update id="PAYF0070.UPDATE01" parameterClass="hashmap">
    <![CDATA[
        UPDATE PY_RTRPAY  /* PAYF0070.UPDATE01 상여, 급여 수정 */
           SET PAYX_AMOT = #PAYX_AMOT#   /* 지급금액 */
             , UPDT_USID = #UPDT_USID#   /* 수정작업자 */
             , UPDT_DATE = SYSDATE       /* 수정일시 */
         WHERE STDS_DATE = #STDS_DATE#   /* 기준일 */
           AND EMPL_NUMB = #EMPL_NUMB#   /* 사원번호 */
           AND ENFC_CODE = #ENFC_CODE#   /* 사업장코드 */
           AND REUD_CODE = #REUD_CODE#   /* 퇴직사용구분코드 */
           AND EXPD_CODE = #EXPD_CODE#   /* 수당공제코드 */
    ]]>
    </update>
<!--
/* ******************************************************************************
     작 성 자 : 김준수
     작 성 일 : 2016. 9. 12
     내    용 : 퇴직추계액 테이블 저장
******************************************************************************* */
-->
   <insert id="PAYF0070.PROC00" parameterClass="inMap">
   <![CDATA[
      DECLARE /* PAYF0070.PROC00 퇴직추계액 처리 */
           v_BEFO_ALWN NUMBER; /* 이전 충당금 */
           v_PROG_RATE NUMBER; /* 2016-10-28 LYG 퇴직누직율 */

       BEGIN

           DELETE FROM PY_RTPSDB /* 퇴직연금예치금 */
            WHERE STDS_DATE = #STDS_DATE#;

           DELETE FROM PY_RTRPAY /* 퇴직추계액급여 */
            WHERE STDS_DATE = #STDS_DATE#;

           DELETE FROM PY_RTRESE /* 퇴직추계액 */
            WHERE STDS_DATE = #STDS_DATE#;

           DELETE FROM PY_RTPSRT /* 퇴직연금예치율 */
            WHERE STDS_DATE = #STDS_DATE#;

           /* 퇴직충당금 입력 */
           INSERT INTO PY_RTRESE (
              STDS_DATE   /* 기준일 */
             ,EMPL_NUMB   /* 사원번호 */
             ,ENFC_CODE   /* 사업장코드 */
             ,WAGE_TAMT   /* 급여합계 */
             ,BONU_TAMT   /* 상여합계 */
             ,ANVA_TAMT   /* 연차수당합계 */
             ,AVEW_AMOT   /* 평균급여액 */
             ,AVBN_AMOT   /* 평균상여액 */
             ,AVAV_AMOT   /* 평균연차수당액 */
             ,AVER_WAGE   /* 평균임금 */
             ,CWRK_YCNT   /* 근속년수 */
             ,CWRK_MCNT   /* 근속월수 */
             ,CWRK_DCNT   /* 근속일수 */
             ,PAYX_RATE   /* 지급율 */
             ,BEFO_ALWN   /* 이전충당금 */
             ,RETI_ALWN   /* 퇴직충당금 */
             ,OCUR_ALWN   /* 발생충당금 */
             ,ENCO_DATE   /* 입사일 */
             ,RCKN_DATE   /* 기산일 */
             ,PAYX_YSNO   /* 지급대상여부 */
             ,REEP_DIVC   /* 퇴직수당구분코드 */
             ,OUTC_BALA   /* 추가 사외예치금 */
             ,INST_USID   /* 등록작업자 */
             ,INST_DATE   /* 등록일시 */
             ,UPDT_USID   /* 수정작업자 */
             ,UPDT_DATE   /* 수정일시 */
           )
           SELECT A.STDS_DATE
                , A.EMPL_NUMB
                , A.ENFC_CODE
                , 0 AS WAGE_TAMT
                , 0 AS BONU_TAMT
                , 0 AS ANVA_TAMT
                , 0 AS AVEW_AMOT
                , 0 AS AVBN_AMOT
                , 0 AS AVAV_AMOT
                , 0 AS AVER_WAGE
                , A.CWRK_YCNT
                , A.CWRK_MCNT
                , (TO_DATE(A.STDS_DATE, 'YYYYMMDD') - (ADD_MONTHS(TO_DATE(A.SDATE,'YYYYMMDD'), (TRUNC(MONTHS_BETWEEN(TO_DATE(A.STDS_DATE,'YYYYMMDD') + 1, TO_DATE(A.SDATE, 'YYYYMMDD')))))-1))
                , 0 AS PAYX_RATE
                , 0 AS BEFO_ALWN
                , 0 AS RETI_ALWN
                , 0 AS OCUR_ALWN
                , A.ENCO_DATE
                , A.RCKN_DATE
                , A.PAYX_YSNO
                , A.REEP_DIVC
                , 0 AS OUTC_BALA
                , #UPDT_USID#
                , SYSDATE
                , #UPDT_USID#
                , SYSDATE
             FROM (
                   SELECT #STDS_DATE# AS STDS_DATE
                        , A.EMPL_NUMB
                        , D.ENFC_CODE
                        , TRUNC(FLOOR(MONTHS_BETWEEN(TO_DATE(#STDS_DATE#, 'YYYYMMDD') + 1, TO_DATE( SF_GET_RCKNDATE(A.EMPL_NUMB, #STDS_DATE#) ,'YYYYMMDD')))/12, 0) AS CWRK_YCNT
                        , MOD(FLOOR(MONTHS_BETWEEN(TO_DATE(#STDS_DATE#, 'YYYYMMDD') + 1, TO_DATE(SF_GET_RCKNDATE(A.EMPL_NUMB, #STDS_DATE#) ,'YYYYMMDD'))), 12) AS CWRK_MCNT
                        /* , NVL(A.PCOP_JCDT,A.ENCO_DATE) AS ENCO_DATE */ /* 2016-11-22 LYG 그룹입사일이 아닌 입사일 기준으로 적용하기 때문에 주석처리 */
                        , A.ENCO_DATE   /* 2016-11-22 LYG 입사일 */
                        , CASE WHEN B.RETR_DATE IS NULL OR B.RETR_DATE < SF_GET_RCKNDATE(A.EMPL_NUMB, #STDS_DATE#)
                               THEN SF_GET_RCKNDATE(A.EMPL_NUMB, #STDS_DATE#)
                               ELSE TO_CHAR(TO_DATE(B.RETR_DATE,'YYYYMMDD') + 1, 'YYYYMMDD')
                           END AS RCKN_DATE
                        /* 2016-11-22 LYG 그룹입사일이 아닌 입사일 기준으로 적용하기 때문에 주석처리 */
                        , CASE WHEN ADD_MONTHS(TO_DATE(A.ENCO_DATE,'YYYYMMDD'), 12) <= TO_DATE(#STDS_DATE#,'YYYYMMDD') + 1
                               THEN '1'
                               ELSE '0'
                           END AS PAYX_YSNO
                        , C.REEP_DIVC
                        , SF_GET_RCKNDATE(A.EMPL_NUMB, #STDS_DATE#) AS  SDATE
                     FROM PY_MASTPM C
                    INNER JOIN TABLE (SF_HR_MASTXM (C.EMPL_NUMB,#STDS_DATE#) ) A
                            ON A.EMPL_NUMB = C.EMPL_NUMB
                             LEFT OUTER JOIN (
                                               SELECT EMPL_NUMB
                                                     ,MAX(FINL_ENDT) AS RETR_DATE
                                                     ,ENFC_CODE
                                               FROM PY_RTPCXM
                                               WHERE FINL_ENDT <= #STDS_DATE#
                                                 AND RERE_CODE = '5'
                                               GROUP BY EMPL_NUMB, ENFC_CODE
                                             ) B
                               ON A.EMPL_NUMB = B.EMPL_NUMB
                             INNER JOIN TABLE (SF_TM_DEPTXM (#STDS_DATE#) ) D
                                     ON D.DEPT_CODE = A.DEPT_CODE

                   WHERE (A.RETR_DATE IS NULL OR A.RETR_DATE > #STDS_DATE#)
                     AND A.ENCO_DATE <= #STDS_DATE#
                     /* 2016-11-16 LYG DC형도 추계 생성되도록 수정 보완 */
                     AND C.REEP_DIVC IN ('1','2','3') /* 1:퇴직일시금, 2.DB형, 3:DC형 */

                     /* 2016-10-28 LYG 급여지급된 사원만 퇴직 추계액 계산하도록 추가 */
                     AND EXISTS ( SELECT 'Y'
                                    FROM PY_PMMAST Z
                                   WHERE Z.EMPL_NUMB = A.EMPL_NUMB )
                  ) A;

           /* 2016-10-28 LYG 지급율 계산 [퇴직추계액] */
           /* 지급율(X년 + Y개월/12 + Z일/365) */
           UPDATE PY_RTRESE
              SET PAYX_RATE = CWRK_YCNT + ( CWRK_MCNT / 12 ) + (CWRK_DCNT / 365 )
            WHERE STDS_DATE = #STDS_DATE#
           ;

           /* 지급율이 0인것은 삭제 [퇴직추계액] */
           DELETE FROM PY_RTRESE
            WHERE STDS_DATE = #STDS_DATE#
              AND PAYX_RATE = 0;

           /* 급여 데이터 입력 [퇴직추계액급여] */
           INSERT INTO PY_RTRPAY
           SELECT
                  #STDS_DATE# AS STDS_DATE
                 ,A.EMPL_NUMB
                 ,A.ENFC_CODE
                 ,A.REUD_CODE AS REUD_CODE
                 ,A.EXPD_CODE
                 ,SUM(CASE WHEN C.PAYX_YMTH IS NOT NULL THEN A.EXPD_AMOT ELSE 0 END) AS PAYX_AMOT
                 ,#UPDT_USID#
                 ,SYSDATE
                 ,#UPDT_USID#
                 ,SYSDATE
            FROM PY_MASTPM M
                  INNER JOIN (
                               SELECT
                                      A.EMPL_NUMB
                                     ,B.EXPD_CODE
                                     /* 2016-11-22 LYG 지급일이 아닌 급여일지의 급여년월 기준으로 적용 */
                                     /* ,SUBSTR(A.PAYX_DATE,1,6) AS PAYX_YMTH */
                                     ,E.WAGE_YMTH  AS   PAYX_YMTH

                                     ,SUM(NVL(B.EXPD_AMOT,0) + NVL(B.RTRC_AMOT,0)) AS EXPD_AMOT
                                     /* ,SUM(NVL(B.INIT_AMOT,0) + NVL(B.RTRC_AMOT,0)) AS EXPD_AMOT */
                                     ,C.REUD_CODE
                                     ,A.ENFC_CODE
                               FROM PY_PMMAST A
                                     INNER JOIN PY_PMDETL B
                                       ON A.PAYX_DATE = B.PAYX_DATE
                                      AND A.WAGE_CODE = B.WAGE_CODE
                                      AND A.EMPL_NUMB = B.EMPL_NUMB
                                     INNER JOIN PY_ALLDED C
                                       ON B.EXPD_CODE = C.EXPD_CODE
                                      AND C.REUD_CODE IN ('1','2') /* 기본급,월간급 */
                                     INNER JOIN PY_PAYCOD D
                                       ON A.WAGE_CODE = D.WAGE_CODE
                                     INNER JOIN PY_PMDIRY E         /* 2016-11-22 LYG 급여일지 */
                                       ON E.PAYX_DATE = A.PAYX_DATE
                                      AND E.WAGE_CODE = A.WAGE_CODE

                               WHERE D.WAGP_CODE NOT IN ('9000','4000') /* 소급, 인상분제외 */
                                 AND B.EXPD_CODE != 'A9005'             /* 2016-11-08  LYG 소급분 수당 제외 */
                               GROUP BY A.EMPL_NUMB, B.EXPD_CODE, E.WAGE_YMTH, C.REUD_CODE, A.ENFC_CODE
                           ) A
                     ON M.EMPL_NUMB = A.EMPL_NUMB
                  LEFT OUTER JOIN (
                                     SELECT
                                            EMPL_NUMB
                                           ,PAYX_YMTH
                                     FROM (
                                           SELECT A.EMPL_NUMB
                                                /* 2016-11-22 LYG 지급일이 아닌 급여일지의 급여년월 기준으로 적용 */
                                                /* , SUBSTR(PAYX_DATE,1,6) AS   PAYX_YMTH */
                                                , E.WAGE_YMTH AS PAYX_YMTH
                                                , ROW_NUMBER() OVER (PARTITION BY A.EMPL_NUMB ORDER BY E.WAGE_YMTH DESC) AS ROWNUMBER
                                             FROM PY_PMMAST A
                                                     INNER JOIN PY_PMDIRY E         /* 2016-11-22 LYG 급여일지 */
                                                       ON E.PAYX_DATE = A.PAYX_DATE
                                                      AND E.WAGE_CODE = A.WAGE_CODE
                                            WHERE E.WAGE_YMTH <= SUBSTR(#STDS_DATE#,1,6)
                                              AND A.WAGP_CODE = '1000'
                                         ) K
                                     WHERE ROWNUMBER<=3
                                   ) C
                     ON A.EMPL_NUMB = C.EMPL_NUMB
                    AND A.PAYX_YMTH = C.PAYX_YMTH
           WHERE M.EMPL_NUMB IN (SELECT EMPL_NUMB FROM PY_RTRESE WHERE STDS_DATE = #STDS_DATE#)

             /* 2016-11-16 LYG 1:퇴직일시금, 2.DB형 과 3:DC형일 경우는 기준일이 DC형전환일보다 작은 경우 */
             AND (( M.REEP_DIVC IN ('1','2') )
                  OR
                  ( M.REEP_DIVC = '3' AND M.REAY_DATE > #STDS_DATE#))

           GROUP BY A.EMPL_NUMB, A.ENFC_CODE, A.REUD_CODE, A.EXPD_CODE;


           /* 2016-11-16 LYG DC형이고 DC형 전환일이 기준일보다 큰 경우 */
           /* 급여 데이터 입력 [퇴직추계액급여] */
           INSERT INTO PY_RTRPAY
           SELECT #STDS_DATE# AS STDS_DATE
                , A.EMPL_NUMB
                , A.ENFC_CODE
                , A.REUD_CODE AS REUD_CODE
                , A.EXPD_CODE
                , SUM(CASE WHEN C.PAYX_YMTH IS NOT NULL THEN A.EXPD_AMOT ELSE 0 END) AS PAYX_AMOT
                , #UPDT_USID#
                , SYSDATE
                , #UPDT_USID#
                , SYSDATE
            FROM PY_MASTPM M
                  INNER JOIN (
                               SELECT
                                      A.EMPL_NUMB
                                     ,B.EXPD_CODE
                                     /* 2016-11-22 LYG 지급일이 아닌 급여일지의 급여년월 기준으로 적용 */
                                     /* ,SUBSTR(A.PAYX_DATE,1,6) AS PAYX_YMTH */
                                     ,E.WAGE_YMTH  AS   PAYX_YMTH


                                     ,SUM(NVL(B.EXPD_AMOT,0) + NVL(B.RTRC_AMOT,0)) AS EXPD_AMOT
                                     /* ,SUM(NVL(B.INIT_AMOT,0) + NVL(B.RTRC_AMOT,0)) AS EXPD_AMOT */
                                     ,C.REUD_CODE
                                     ,A.ENFC_CODE
                               FROM PY_PMMAST A
                                     INNER JOIN PY_PMDETL B
                                       ON A.PAYX_DATE = B.PAYX_DATE
                                      AND A.WAGE_CODE = B.WAGE_CODE
                                      AND A.EMPL_NUMB = B.EMPL_NUMB
                                     INNER JOIN PY_ALLDED C
                                       ON B.EXPD_CODE = C.EXPD_CODE
                                      AND C.REUD_CODE IN ('1','2') /* 기본급,월간급 */
                                     INNER JOIN PY_PAYCOD D
                                       ON A.WAGE_CODE = D.WAGE_CODE
                                     INNER JOIN PY_PMDIRY E         /* 2016-11-22 LYG 급여일지 */
                                       ON E.PAYX_DATE = A.PAYX_DATE
                                      AND E.WAGE_CODE = A.WAGE_CODE
                               WHERE D.WAGP_CODE NOT IN ('9000','4000') /* 소급, 인상분제외 */
                                 AND B.EXPD_CODE != 'A9005'             /* 2016-11-08  LYG 소급분 수당 제외 */
                               GROUP BY A.EMPL_NUMB, B.EXPD_CODE, E.WAGE_YMTH, C.REUD_CODE, A.ENFC_CODE
                           ) A
                     ON M.EMPL_NUMB = A.EMPL_NUMB
                  LEFT OUTER JOIN (
                                     SELECT
                                            EMPL_NUMB
                                           ,PAYX_YMTH
                                     FROM (
                                           SELECT
                                                  A.EMPL_NUMB
                                                /* 2016-11-22 LYG 지급일이 아닌 급여일지의 급여년월 기준으로 적용 */
                                                /* ,SUBSTR(PAYX_DATE,1,6) AS PAYX_YMTH */
                                                , E.WAGE_YMTH AS PAYX_YMTH
                                                , ROW_NUMBER() OVER (PARTITION BY A.EMPL_NUMB ORDER BY E.WAGE_YMTH DESC) AS ROWNUMBER
                                             FROM PY_PMMAST A
                                                     INNER JOIN PY_PMDIRY E         /* 2016-11-22 LYG 급여일지 */
                                                       ON E.PAYX_DATE = A.PAYX_DATE
                                                      AND E.WAGE_CODE = A.WAGE_CODE
                                            WHERE E.WAGE_YMTH <= SUBSTR(#STDS_DATE#,1,6)
                                              AND E.WAGE_YMTH >= SUBSTR(SF_GET_RCKNDATE(A.EMPL_NUMB, #STDS_DATE#),1,6)
                                              AND A.WAGP_CODE = '1000'
                                         ) K
                                     WHERE ROWNUMBER<=12
                                   ) C
                     ON A.EMPL_NUMB = C.EMPL_NUMB
                    AND A.PAYX_YMTH = C.PAYX_YMTH
           WHERE M.EMPL_NUMB IN (SELECT EMPL_NUMB FROM PY_RTRESE WHERE STDS_DATE = #STDS_DATE#)
             AND (M.REEP_DIVC = '3' AND M.REAY_DATE <= #STDS_DATE#)
           GROUP BY A.EMPL_NUMB, A.ENFC_CODE, A.REUD_CODE, A.EXPD_CODE;

           /* 상여데이터 입력 [퇴직추계액급여] */
           INSERT INTO PY_RTRPAY
           SELECT
                  #STDS_DATE# AS STDS_DATE
                 ,A.EMPL_NUMB
                 ,A.ENFC_CODE
                 ,C.REUD_CODE
                 ,B.EXPD_CODE
                 ,SUM(NVL(B.EXPD_AMOT,0) + NVL(B.RTRC_AMOT,0)) AS PAYX_AMOT /* 상여수당 */
                 /* ,SUM(NVL(B.INIT_AMOT,0) + NVL(B.RTRC_AMOT,0)) AS EXPD_AMOT */
                 ,#UPDT_USID#
                 ,SYSDATE
                 ,#UPDT_USID#
                 ,SYSDATE
           FROM PY_MASTPM M
                 INNER JOIN PY_PMMAST A
                   ON M.EMPL_NUMB = A.EMPL_NUMB
                 INNER JOIN PY_PMDETL B
                   ON A.PAYX_DATE = B.PAYX_DATE
                     AND A.WAGE_CODE = B.WAGE_CODE
                     AND A.EMPL_NUMB = B.EMPL_NUMB
                 INNER JOIN PY_ALLDED C
                   ON B.EXPD_CODE = C.EXPD_CODE
                     AND C.REUD_CODE = '3'
                 INNER JOIN PY_PAYCOD D
                   ON A.WAGE_CODE = D.WAGE_CODE
                 INNER JOIN PY_PMDIRY E         /* 2016-11-22 LYG 급여일지 */
                   ON E.PAYX_DATE = A.PAYX_DATE
                  AND E.WAGE_CODE = A.WAGE_CODE
           WHERE
                 /* 2016-11-22 LYG 지급일이 아닌 급여일지의 급여년월 기준으로 적용 */
                 E.WAGE_YMTH BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE(#STDS_DATE#,'YYYYMMDD') + 1, -12),'YYYYMM') AND SUBSTR(#STDS_DATE#,1,6)

             AND D.WAGP_CODE NOT IN ('9000','4000') /* 소급, 인상분제외 */

             AND B.EXPD_CODE NOT IN ('A9005','A0070')   /* 2016-11-08 LYG 소급분, 연차수당 제외 */

             /* 2016-11-16 LYG 1:퇴직일시금, 2.DB형 과 3:DC형일 경우는 기준일이 DC형전환일보다 작은 경우 */
             AND (( M.REEP_DIVC IN ('1','2') )
                  OR
                  ( M.REEP_DIVC = '3' AND M.REAY_DATE > #STDS_DATE#))
             AND M.EMPL_NUMB IN (SELECT EMPL_NUMB FROM PY_RTRESE WHERE STDS_DATE = #STDS_DATE#)
           GROUP BY A.EMPL_NUMB, A.ENFC_CODE, C.REUD_CODE, B.EXPD_CODE
           ;

           /* 2016-11-16 LYG DC형이고 DC형 전환일이 기준일보다 큰 경우 */
           /* 상여데이터 입력  [퇴직추계액급여]*/
           INSERT INTO PY_RTRPAY
           SELECT
                  #STDS_DATE# AS STDS_DATE
                 ,A.EMPL_NUMB
                 ,A.ENFC_CODE
                 ,C.REUD_CODE
                 ,B.EXPD_CODE
                 ,SUM(NVL(B.EXPD_AMOT,0) + NVL(B.RTRC_AMOT,0)) AS PAYX_AMOT /* 상여수당 */
                 /* ,SUM(NVL(B.INIT_AMOT,0) + NVL(B.RTRC_AMOT,0)) AS EXPD_AMOT */
                 ,#UPDT_USID#
                 ,SYSDATE
                 ,#UPDT_USID#
                 ,SYSDATE
           FROM PY_MASTPM M
                 INNER JOIN PY_PMMAST A
                   ON M.EMPL_NUMB = A.EMPL_NUMB
                 INNER JOIN PY_PMDETL B
                   ON A.PAYX_DATE = B.PAYX_DATE
                     AND A.WAGE_CODE = B.WAGE_CODE
                     AND A.EMPL_NUMB = B.EMPL_NUMB
                 INNER JOIN PY_ALLDED C
                   ON B.EXPD_CODE = C.EXPD_CODE
                     AND C.REUD_CODE = '3'
                 INNER JOIN PY_PAYCOD D
                   ON A.WAGE_CODE = D.WAGE_CODE
                 INNER JOIN PY_PMDIRY E         /* 2016-11-22 LYG 급여일지 */
                   ON E.PAYX_DATE = A.PAYX_DATE
                  AND E.WAGE_CODE = A.WAGE_CODE
           WHERE
                 /* 2016-11-22 LYG 지급일이 아닌 급여일지의 급여년월 기준으로 적용 */
                 E.WAGE_YMTH BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE(#STDS_DATE#,'YYYYMMDD') + 1, -12),'YYYYMM') AND SUBSTR(#STDS_DATE#,1,6)
             AND SF_GET_RCKNDATE(M.EMPL_NUMB, #STDS_DATE#) <= A.PAYX_DATE
             AND D.WAGP_CODE NOT IN ('9000','4000') /* 소급, 인상분제외 */
             AND B.EXPD_CODE NOT IN ('A9005','A0070')   /* 2016-11-08 LYG 소급분, 연차수당 제외 */
             AND (M.REEP_DIVC = '3' AND M.REAY_DATE <= #STDS_DATE#)
             AND M.EMPL_NUMB IN (SELECT EMPL_NUMB FROM PY_RTRESE WHERE STDS_DATE = #STDS_DATE#)
           GROUP BY A.EMPL_NUMB, A.ENFC_CODE, C.REUD_CODE, B.EXPD_CODE
           ;

           /* 2016-11-22 LYG 연차수당 계산 [퇴직추계액급여] */
           INSERT INTO PY_RTRPAY
           SELECT #STDS_DATE# AS STDS_DATE
                , B.EMPL_NUMB
                , E.ENFC_CODE
                , '3'       AS  REUD_CODE
                , 'A0070'   AS  EXPD_CODE
                , ROUND((D.BSLY_AMOT/209)*8, -1) *  C.REMA_ANDC AS EXPD_AMOT    /* 연차수당금액 */
                , #UPDT_USID#
                , SYSDATE
                , #UPDT_USID#
                , SYSDATE
             FROM PY_MASTPM A
                     INNER JOIN TABLE(SF_HR_MASTXM( A.EMPL_NUMB, #STDS_DATE# )) B
                        ON A.EMPL_NUMB = B.EMPL_NUMB
                     INNER JOIN (SELECT A.EMPL_NUMB
                                      , SUM(A.APLY_ANDC) - SUM(A.ADJT_ANDC) AS APLY_ANDC                    /* 발생연차 */
                                      , SUM(A.USEX_ANDC) AS USEX_ANDC                                       /* 사용연차 */
                                      , SUM(A.APLY_ANDC) - SUM(A.ADJT_ANDC) - SUM(A.USEX_ANDC) AS REMA_ANDC /* 잔여연차 */
                                      , SUM(A.PROM_ANDC) AS PROM_ANDC                                       /* 촉진연차 */
                                   FROM (SELECT EMPL_NUMB
                                              , APLY_ANDC
                                              , 0 ADJT_ANDC
                                              , 0 USEX_ANDC
                                              , PROM_ANDC
                                           FROM AT_ANNUXM    /* 연차관리 */
                                          WHERE STDS_YEAR = SUBSTR(#STDS_DATE#, 1, 4)
                                          UNION ALL
                                         SELECT EMPL_NUMB
                                              , 0 APLY_ANDC
                                              , SUM(ADJT_ANDC) ADJT_ANDC
                                              , 0 USEX_ANDC
                                              , 0 PROM_ANDC
                                           FROM AT_ANNUXD     /* 연차조정 */
                                          WHERE STDS_YEAR = SUBSTR(#STDS_DATE#, 1, 4)
                                          GROUP BY EMPL_NUMB
                                          UNION ALL
                                         SELECT EMPL_NUMB
                                              , 0 APLY_ANDC
                                              , 0 ADJT_ANDC
                                              , SUM(WORK_TIME) USEX_ANDC
                                              , 0  PROM_ANDC
                                           FROM AT_ATTEDY        /* 일일근태 */
                                          WHERE WORK_GUBN = '4'
                                            AND ATTE_DATE LIKE SUBSTR(#STDS_DATE#, 1, 4)||'%'
                                          GROUP BY EMPL_NUMB
                                         ) A
                                  GROUP BY A.EMPL_NUMB
                                 ) C ON A.EMPL_NUMB = C.EMPL_NUMB
                  LEFT OUTER JOIN ( SELECT EMPL_NUMB
                                         , BSLY_AMOT
                                      FROM ( SELECT EMPL_NUMB
                                                  , BSLY_AMOT
                                                  , ROW_NUMBER() OVER ( PARTITION BY EMPL_NUMB ORDER BY EMPL_NUMB, STDS_DATE DESC, SRAL_NUMB DESC ) R_NUM
                                               FROM PY_REGSAL
                                              WHERE STDS_DATE <= #STDS_DATE#
                                           )
                                     WHERE R_NUM = 1
                                 ) D
                                ON A.EMPL_NUMB = D.EMPL_NUMB
                   INNER JOIN TM_DEPTXM E
                      ON E.DEPT_CODE = B.DEPT_CODE
           WHERE A.EMPL_NUMB IN (SELECT EMPL_NUMB FROM PY_RTRESE WHERE STDS_DATE = #STDS_DATE#)
           ;

           /* 금액 0 삭제 [퇴직추계액급여 */
           DELETE FROM PY_RTRPAY
            WHERE STDS_DATE = #STDS_DATE#
              AND PAYX_AMOT = 0;


           /* 급상여합계 업데이트 [퇴직추계액] */
           UPDATE PY_RTRESE A
              SET (WAGE_TAMT, BONU_TAMT, ANVA_TAMT, AVEW_AMOT, AVBN_AMOT, AVAV_AMOT) = (
                                             SELECT NVL(B.WAGE_TAMT,0)                  /* 급여합계 */
                                                   ,NVL(B.BONU_TAMT,0)                  /* 상여합계 */
                                                   ,NVL(B.ANVA_TAMT,0)                  /* 연차수당합계 */
                                                   ,ROUND(NVL(B.WAGE_TAMT,0) / 3, -1)       /* 평균급여액 */
                                                   ,ROUND(NVL(B.BONU_TAMT,0) / 12)      /* 평균상여액 */
                                                   ,ROUND(NVL(B.ANVA_TAMT,0) / 12)      /* 평균연차수당액 */
                                             FROM (
                                                   SELECT STDS_DATE
                                                         ,EMPL_NUMB
                                                         ,ENFC_CODE
                                                         ,SUM(CASE WHEN REUD_CODE IN ('1','2') THEN PAYX_AMOT ELSE 0 END) AS WAGE_TAMT
                                                         ,SUM(CASE WHEN REUD_CODE = '3' AND EXPD_CODE != 'A0070' THEN PAYX_AMOT ELSE 0 END) AS BONU_TAMT   /* 상여합계 */
                                                         ,SUM(CASE WHEN REUD_CODE = '3' AND EXPD_CODE  = 'A0070' THEN PAYX_AMOT ELSE 0 END) AS ANVA_TAMT   /* 연차수당 */
                                                   FROM PY_RTRPAY
                                                   GROUP BY STDS_DATE, EMPL_NUMB, ENFC_CODE
                                                 ) B
                                             WHERE A.STDS_DATE = B.STDS_DATE
                                               AND A.EMPL_NUMB = B.EMPL_NUMB
                                               AND A.ENFC_CODE = B.ENFC_CODE
                                             )
           WHERE STDS_DATE = #STDS_DATE#
             /* 2016-11-16 LYG 1:퇴직일시금, 2.DB형 과 3:DC형일 경우는 기준일이 DC형전환일보다 작은 경우 */
             AND EXISTS ( SELECT 'Y'
                            FROM PY_MASTPM Z
                           WHERE Z.EMPL_NUMB = A.EMPL_NUMB
                             AND (( Z.REEP_DIVC IN ('1','2') )
                                  OR
                                  ( Z.REEP_DIVC = '3' AND Z.REAY_DATE > #STDS_DATE#))
                         )
              ;

           /* 2016-11-16 LYG DC형이고 DC형 전환일이 기준일보다 큰 경우 */
           /* 급상여합계 업데이트 [퇴직추계액] */
           UPDATE PY_RTRESE A
              SET (WAGE_TAMT, BONU_TAMT, ANVA_TAMT, AVEW_AMOT, AVBN_AMOT, AVAV_AMOT) = (
                                             SELECT NVL(B.WAGE_TAMT,0)                  /* 급여합계 */
                                                   ,NVL(B.BONU_TAMT,0)                  /* 상여합계 */
                                                   ,NVL(B.ANVA_TAMT,0)                  /* 연차수당합계 */
                                                   ,ROUND(NVL(B.WAGE_TAMT,0) / ( CASE WHEN ((A.CWRK_YCNT * 12) + A.CWRK_MCNT + (CASE WHEN A.CWRK_DCNT = 0 THEN 0 ELSE 1 END )) > 12 THEN
                                                                                           12
                                                                                      ELSE
                                                                                           (A.CWRK_YCNT * 12) + A.CWRK_MCNT + (CASE WHEN A.CWRK_DCNT = 0 THEN 0 ELSE 1 END )
                                                                                      END
                                                                               ), -1)       /* 평균급여액 */
                                                   ,ROUND(NVL(B.BONU_TAMT,0) / 12)      /* 평균상여액 */
                                                   ,ROUND(NVL(B.ANVA_TAMT,0) / 12)      /* 평균연차수당액 */
                                             FROM (
                                                   SELECT STDS_DATE
                                                         ,EMPL_NUMB
                                                         ,ENFC_CODE
                                                         ,SUM(CASE WHEN REUD_CODE IN ('1','2') THEN PAYX_AMOT ELSE 0 END) AS WAGE_TAMT
                                                         ,SUM(CASE WHEN REUD_CODE = '3' AND EXPD_CODE != 'A0070' THEN PAYX_AMOT ELSE 0 END) AS BONU_TAMT   /* 상여합계 */
                                                         ,SUM(CASE WHEN REUD_CODE = '3' AND EXPD_CODE  = 'A0070' THEN PAYX_AMOT ELSE 0 END) AS ANVA_TAMT   /* 연차수당 */
                                                   FROM PY_RTRPAY
                                                   GROUP BY STDS_DATE, EMPL_NUMB, ENFC_CODE
                                                 ) B
                                             WHERE A.STDS_DATE = B.STDS_DATE
                                               AND A.EMPL_NUMB = B.EMPL_NUMB
                                               AND A.ENFC_CODE = B.ENFC_CODE
                                             )
           WHERE STDS_DATE = #STDS_DATE#
             AND EXISTS ( SELECT 'Y'
                            FROM PY_MASTPM Z
                           WHERE Z.REEP_DIVC = '3'
                             AND Z.REAY_DATE <= #STDS_DATE#
                             AND Z.EMPL_NUMB = A.EMPL_NUMB
                         )
              ;

           /* 퇴직충당금 업데이트 [퇴직추계액] */
           UPDATE PY_RTRESE A
              /* SET AVER_WAGE = TRUNC(WAGE_TAMT / 3) + TRUNC( (BONU_TAMT + ANVA_TAMT)  / 12) */
              SET AVER_WAGE = NVL(AVEW_AMOT,0) + TRUNC(ANVA_TAMT/12) + NVL(AVBN_AMOT,0)
                 /* 2016-10-28 LYG 퇴직누진율 적용을 위해 주석처리 */
                 /* ,RETI_ALWN = ROUND((TRUNC(WAGE_TAMT / 3) + TRUNC((BONU_TAMT + ANVA_TAMT) / 12)) * PAYX_RATE,0) */

                 ,RETI_ALWN = ROUND((TRUNC(WAGE_TAMT / 3) + TRUNC((BONU_TAMT + ANVA_TAMT) / 12)) * PAYX_RATE * NVL( TO_NUMBER(SF_GET_COMMNAMEREF('RETR_RATE', EMPL_NUMB, '1')), 1 ),0)
            WHERE STDS_DATE = #STDS_DATE#
              AND PAYX_YSNO = '1' /* 지급여부가 1인 사람들만 퇴직충당금 금액 저장 */
              /* 2016-11-16 LYG 1:퇴직일시금, 2.DB형 과 3:DC형일 경우는 기준일이 DC형전환일보다 작은 경우 */
              AND EXISTS ( SELECT 'Y'
                            FROM PY_MASTPM Z
                           WHERE Z.EMPL_NUMB = A.EMPL_NUMB
                             AND (( Z.REEP_DIVC IN ('1','2') )
                                  OR
                                  ( Z.REEP_DIVC = '3' AND Z.REAY_DATE > #STDS_DATE#))
                         )
              ;

           /* 2016-11-16 LYG DC형이고 DC형 전환일이 기준일보다 큰 경우 */
           /* 퇴직충당금 업데이트 [퇴직추계액] */
           UPDATE PY_RTRESE A
              /* SET AVER_WAGE = TRUNC(WAGE_TAMT / ( CASE WHEN ((A.CWRK_YCNT * 12) + A.CWRK_MCNT + (CASE WHEN A.CWRK_DCNT = 0 THEN 0 ELSE 1 END )) > 12 THEN
                                                            12
                                                       ELSE
                                                            (A.CWRK_YCNT * 12) + A.CWRK_MCNT + (CASE WHEN A.CWRK_DCNT = 0 THEN 0 ELSE 1 END )
                                                       END
                                                )) + TRUNC(BONU_TAMT / 12) */
              SET AVER_WAGE = NVL(AVEW_AMOT,0) + TRUNC(ANVA_TAMT/12) + NVL(AVBN_AMOT,0)
                 ,RETI_ALWN = ROUND((NVL(WAGE_TAMT,0) + NVL(ANVA_TAMT,0) + NVL(BONU_TAMT,0)) / 12)
            WHERE STDS_DATE = #STDS_DATE#
              AND PAYX_YSNO = '1' /* 지급여부가 1인 사람들만 퇴직충당금 금액 저장 */
              AND EXISTS ( SELECT 'Y'
                            FROM PY_MASTPM Z
                           WHERE Z.REEP_DIVC = '3'
                             AND Z.REAY_DATE <= #STDS_DATE#
                             AND Z.EMPL_NUMB = A.EMPL_NUMB
                         )
              ;

           /* 사외예치금 업데이트 [퇴직추계액] */
           UPDATE PY_RTRESE
              SET OUTC_BALA = RETI_ALWN
            WHERE STDS_DATE = #STDS_DATE#
              AND PAYX_YSNO = '1' /* 지급여부가 1인 사람들만 퇴직충당금 금액 저장 */
              AND REEP_DIVC = '2' /* DB형만 사외예치금 금액 저장 */
            ;

        /* 2016.12.28 AYJ 컬럼 추가 [퇴직추계액] */
        UPDATE PY_RTRESE Z
               /* 중간정산일자 */
           SET RECP_DATE = (SELECT A.FINL_ENDT
                              FROM PY_RTPCXM A
                             INNER JOIN (SELECT A.EMPL_NUMB
                                              , MAX(A.RECE_SEQN) AS RECE_SEQN
                                              , B.ENFC_CODE
                                              , B.STDS_DATE
                                           FROM PY_RTPCXM A
                                          INNER JOIN PY_RTRESE B
                                                  ON A.EMPL_NUMB = B.EMPL_NUMB
                                                 AND B.STDS_DATE = #STDS_DATE#
                                          WHERE A.FINL_PYDT <= #STDS_DATE#
                                            AND A.RERE_CODE = '5'
                                          GROUP BY A.EMPL_NUMB, B.ENFC_CODE, B.STDS_DATE) B
                                     ON A.EMPL_NUMB = B.EMPL_NUMB
                                    AND A.RECE_SEQN = B.RECE_SEQN
                            WHERE A.FINL_PYDT <= #STDS_DATE#
                              AND A.RERE_CODE = '5'
                              AND B.STDS_DATE = Z.STDS_DATE
                              AND B.EMPL_NUMB = Z.EMPL_NUMB
                              AND B.ENFC_CODE = Z.ENFC_CODE)+1
               /* 임직원구분 */
             , WRDV_CODE = (SELECT WRDV_CODE
                              FROM HR_MASTXM A
                             WHERE A.EMPL_NUMB = Z.EMPL_NUMB)
               /* 퇴직누진율 */
             , RETR_RATE = (SELECT REF1_FILD
                              FROM TM_CODEXD A
                             WHERE A.COMM_CODE = 'RETR_RATE'
                               AND A.COMD_CODE = Z.EMPL_NUMB)
               /* 계정권한그룹코드 */
             , AAGR_CODE = (SELECT DISTINCT C.AAGR_CODE
                              FROM TABLE(SF_HR_MASTXM(Z.EMPL_NUMB, #STDS_DATE#)) A
                              LEFT JOIN TABLE(SF_TM_DEPTXM(#STDS_DATE#)) B
                                     ON A.DEPT_CODE = B.DEPT_CODE
                              LEFT OUTER JOIN TA_CSTCXM C
                                     ON B.DEPT_CODE = C.DEPT_CODE
                                    AND C.ENDX_DATE >= #STDS_DATE#)
         WHERE STDS_DATE = #STDS_DATE#
         ;
         
           /* 전월충당금 업데이트 */
           FOR RS IN (
             SELECT STDS_DATE, EMPL_NUMB, ENFC_CODE, RETI_ALWN
               FROM PY_RTRESE
              WHERE STDS_DATE = #STDS_DATE#
                AND NVL(RETI_ALWN,0) > 0
           ) LOOP

             v_BEFO_ALWN:=0;

             BEGIN

               SELECT NVL(A.RETI_ALWN,0) INTO v_BEFO_ALWN
                 FROM PY_RTRESE A
                WHERE A.EMPL_NUMB = RS.EMPL_NUMB
                  /* AND A.ENFC_CODE = RS.ENFC_CODE */
                  AND A.STDS_DATE = ( SELECT MAX(STDS_DATE)
                                        FROM PY_RTRESE B
                                       WHERE A.EMPL_NUMB = B.EMPL_NUMB
                                         /* AND A.ENFC_CODE = B.ENFC_CODE */
                                         AND B.STDS_DATE < RS.STDS_DATE )
                ;

               EXCEPTION
                 WHEN NO_DATA_FOUND THEN v_BEFO_ALWN:=0;

             END;

             /* 전월충당금 업데이트 [퇴직추계액] */
             UPDATE PY_RTRESE
                SET BEFO_ALWN = v_BEFO_ALWN
                   ,OCUR_ALWN = RETI_ALWN - v_BEFO_ALWN
              WHERE STDS_DATE = RS.STDS_DATE
                AND EMPL_NUMB = RS.EMPL_NUMB
                AND ENFC_CODE = RS.ENFC_CODE
              ;

           END LOOP;

           INSERT INTO PY_RTPSRT ( /* [퇴직연금예치율] */
                  STDS_DATE   /* 기준일 */
                 ,ENFC_CODE   /* 사업장코드 */
                 ,REAY_JOCD   /* 퇴직연금가입기관 */
                 ,DEPO_RATE   /* 예치율 */
                 ,INST_USID   /* 등록자 */
                 ,INST_DATE   /* 등록일시 */
                 ,UPDT_USID   /* 수정자 */
                 ,UPDT_DATE   /* 수정일시 */
                 )
          SELECT  #STDS_DATE#
                 ,A.ENFC_CODE
                 ,A.REAY_JOCD
                 ,0
                 ,#UPDT_USID#
                 ,SYSDATE
                 ,#UPDT_USID#
                 ,SYSDATE
            FROM PY_RTBUSI A
           WHERE A.DBTU_YSNO = '1'
           ;

           INSERT INTO PY_RTPSDB ( /* [퇴직연금예치금] */
                  STDS_DATE   /* 기준일 */
                 ,ENFC_CODE   /* 사업장코드 */
                 ,EMPL_NUMB   /* 사원번호 */
                 ,REAY_JOCD   /* 퇴직연금사업자 */
                 ,RTPD_AMOT   /* 퇴직연금예치금액 */
                 ,INST_USID   /* 등록자 */
                 ,INST_DATE   /* 등록일시 */
                 ,UPDT_USID   /* 수정자 */
                 ,UPDT_DATE   /* 수정일시 */
                 )
          SELECT  A.STDS_DATE
                 ,A.ENFC_CODE
                 ,A.EMPL_NUMB
                 ,B.REAY_JOCD
                 ,0
                 ,#UPDT_USID#
                 ,SYSDATE
                 ,#UPDT_USID#
                 ,SYSDATE
            FROM PY_RTRESE A, PY_RTBUSI B
           WHERE A.STDS_DATE = #STDS_DATE#
             AND B.ENFC_CODE = A.ENFC_CODE  /* 2016-11-08 LYG 사업장 조건 JOIN */
             AND B.DBTU_YSNO = '1'
             AND A.REEP_DIVC = '2' /* DB형퇴직연금자 */
           ;

       END;
   ]]>
   </insert>
<!--
/* ******************************************************************************
     작 성 자 : 김준수
     작 성 일 : 2016. 9. 12
     내    용 : 퇴직추계액 테이블 삭제
******************************************************************************* */
-->
    <insert id="PAYF0070.DELETE00" parameterClass="hashmap">
    <![CDATA[
        DECLARE /* PAYF0070.DELETE00.퇴직추계액 테이블 삭제 */
            v_ROWCNT INT;

        BEGIN
            BEGIN
            /* 유효성체크 : 이후 처리된 내역이 없을 경우 */
               SELECT COUNT(1)
                 INTO v_ROWCNT
                 FROM PY_RTRESE A
                WHERE A.STDS_DATE > #STDS_DATE#
           ;

            EXCEPTION
                WHEN NO_DATA_FOUND THEN v_ROWCNT:=0;
            END;

            /* 마감되었다면 수정불가 */
            IF v_ROWCNT > 0 THEN
              RAISE_APPLICATION_ERROR(-20000, SF_GET_MESSAGE('PAY064',''));
            END IF;

            DELETE FROM PY_RTPSDB
             WHERE STDS_DATE = #STDS_DATE#
            ;
            DELETE FROM PY_RTRPAY
             WHERE STDS_DATE = #STDS_DATE#
            ;
            DELETE FROM PY_RTRESE
             WHERE STDS_DATE = #STDS_DATE#
            ;
            DELETE FROM PY_RTPSRT
             WHERE STDS_DATE = #STDS_DATE#
            ;
        END;
    ]]>
    </insert>
</sqlMap>