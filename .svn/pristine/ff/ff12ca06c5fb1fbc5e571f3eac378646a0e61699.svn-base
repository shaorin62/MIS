<?xml version="1.0" encoding="utf-8"?>
<FDL version="1.5">
  <TypeDefinition url="../../default_typedef.xml"/>
  <Form id="comexcel" onload="fn_FormLoadSetting" titletext="엑셀저장(Export to Excel)" position="absolute" scrollbars="none" left="0" width="1054" top="0" height="717">
    <Layouts>
      <Layout>
        <MPFileDialog Filter="Excel File(*.xls)|*.xls|All(*.*)|*.*|" id="fdExcel" taborder="4" position="absolute" left="820" width="24" top="4" height="24"/>
        <MPFile FileName="C:\down.xls" id="flExcel" taborder="4" position="absolute" left="852" width="24" top="4" height="24"/>
        <Button id="btnClose" onclick="btnClose_OnClick" taborder="2" position="absolute" width="62" height="24" cssclass="btn_POP_CRUD" style="cursor:hand;" text="닫기" right="14" bottom="12"/>
        <Div id="divGridPanel" taborder="4" left="15" top="15" right="14" bottom="44">
          <Layouts>
            <Layout/>
          </Layouts>
        </Div>
        <Static id="Static03" taborder="5" text="h 15" visible="false" left="48" top="0" width="120" height="15" style="background:#fb7b7b7a;"/>
        <Static id="Static02" taborder="6" text="w&#13;&#10;15" cssclass="sta_GID_box" visible="false" left="0" top="0" width="15" height="461"/>
        <Static id="Static06" taborder="7" text="w&#13;&#10;15" cssclass="sta_GID_box" visible="false" left="1039" top="8" width="15" height="461"/>
        <Static id="Static07" taborder="8" text="h 8" visible="false" left="975" top="673" width="64" height="8" style="background:#fb7b7b7a;"/>
        <Static id="Static05" taborder="9" text="h 12" visible="false" left="975" top="705" width="64" height="12" style="background:#fb7b7b7a;"/>
      </Layout>
    </Layouts>
    <Objects>
      <ExcelExportObject id="ExcelExportObject" exporttype="288" exporteventtype="itemrecord" commcompress="true" commdataformat="ssv" exportfilename="ExcelExportTest" exportmessagecomplete="Export End" exportmessageprocess="%d [ %d / %d ]" exportmessageready="Export" onsuccess="ExcelExportObject00_onsuccess" onprogress="ExcelExportObject00_onprogress" exportuitype="exportprogress"/>
      <Dataset id="Dataset00" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="Column0" type="STRING" size="256"/>
          <Column id="Column1" type="STRING" size="256"/>
          <Column id="Column2" type="STRING" size="256"/>
          <Column id="Column3" type="STRING" size="256"/>
          <Column id="Column4" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
          <Row/>
          <Row/>
          <Row/>
          <Row/>
        </Rows>
      </Dataset>
    </Objects>
    <Script type="xscript5.0"><![CDATA[/***************************************************************************************************
 *   Form Common Script                                                                             *
 *      1) 공통 스크립트 위치 및 명칭은 수정 불가 입니다.                                           *
 *      2) 각 함수에서 필요한 부분의 소스를 수정 하세요.                                            *
 *      3) 해당 프로그램의 기능이 없는 경우 해당 함수의 이름만 놓고 공백 처리                       *
 *                                                                                                  *
 *  ★ 위 사항의 변경이 있거나 추가 사항이 있을 경우 반드시 개발 PL과 상의 후 수정 요망             *
 *     현재 총 100 컬럼임 되도록 100 컬럼 안으로 코딩을 하세요                                      *
 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 1234567890
 ***************************************************************************************************/
include "script::lib_script_common.xjs";
/*********************
 *  화면 변수 선언부  *
 *********************/
this.sSENDTOPWINDOW = ""; //현재 MDI에 활성화된 폼
this.iTOTALCOUNTER  = 0; //전체 그리드 Counter
this.iContentTop    = 10; //Componect Top

/*--------------------------------+
|  최초 화면 Load時 처리 할 사항  |
+---------------------------------*/
this.fn_FormLoadSetting = function (obj:Form, e:LoadEventInfo) {
	this.sSENDTOPWINDOW = this.opener;         //Popup에서 전달한 폼 인자를 할당한다.
	this.fn_CheckTopForm(this.sSENDTOPWINDOW); //Grid Create & Display
}

/*------------+
|  화면 종료  |
+-------------*/
this.btnClose_OnClick = function (obj:Button, e:ClickEventInfo) {
	this.close();
}

/*--------------------------------+
 |  Grid & Button Create(Drawing)  |
 +---------------------------------*/
this.fn_CheckTopForm = function (checkObj) {

	var sTemp    = "";
	var sDataset = "";
	var arrContents;
	var arrProp = ["autosizebandtype","autosizingtype","extendsizetype","suppresslevel","cssclass"];

	// MDI에서 활성된 폼의 Control을 배열에 할당한다.
	arrContents = checkObj.components;

	for (var i = 0; i < arrContents.length; i++) {
		
		// 컴포넌트중 Grid일 경우
		if ((arrContents[i] instanceof Grid) && ((arrContents[i].visible == true) || (arrContents[i].UserData == 'Y'))) {
			
			// DataSet 명 구하기
			sDataset = arrContents[i].binddataset;

			// Create Object  
			var objGrid = new Grid();
			objGrid.init('grdExcel' + this.iTOTALCOUNTER, "absolute", 10, this.iContentTop, 902, 250, null, null);
			this.divGridPanel.addChild('grdExcel' + this.iTOTALCOUNTER, objGrid); 
			//objGrid.set_cssclass("styGrid01");
			
			objGrid.show(); 
			objGrid.setBindDataset(eval("this.opener."+sDataset));

			// 원본 Grid의 Contents를 생성된 Grid에 할당한다.
			objGrid.set_enableredraw(false);
			//objGrid.set_formats(arrContents[i].getCurFormatString());			
			var sFormat = nexacro.replaceAll(arrContents[i].getCurFormatString(), "comp.parent", "comp.parent.parent.opener");
			objGrid.set_formats(sFormat);
			
			for(var iProp = 0; iProp < arrProp.length ; iProp++){
				eval("objGrid.set_"+arrProp[iProp]+"(arrContents[i]."+arrProp[iProp]+")");
			}			
			
			var arrDataset = [];
			var j = 0;
			
			for (var iCell = 0; iCell < objGrid.getCellCount("Body") ; iCell++) {
				if (!this.fnc_IsEmpty(objGrid.getCellProperty("Body", iCell, "combodataset"))) {
					arrDataset[j] = objGrid.getCellProperty("Body", iCell, "combodataset");
					j++;
				}
			}

			for(var j=0; j < arrDataset.length ; j++){
				if(!this.isValidObject(arrDataset[j])){
					var objDs = new Dataset();
					objDs.copyData(eval("this.opener." + arrDataset[j]));
					this.addChild(arrDataset[j], objDs); 
				}
			}	

			objGrid.set_enableredraw(true);
			//objGrid.body.style.set_cellbackground("default");
			//objGrid.body.style.set_cellbackground2("#eff5ffff");

			// 엑셀 실행 버튼 만들기
			var objButton = new Button();  
			objButton.init('btnExcel' + this.iTOTALCOUNTER, "absolute", 922, this.iContentTop, 82, 24, null, null);
			this.divGridPanel.addChild('btnExcel' + this.iTOTALCOUNTER, objButton); 
			objButton.set_cssclass("styTextButtonBizProc");
			objButton.set_text("Save Excel");
			objButton.addEventHandler("onclick", this.fn_ExportExcel, this);
			objButton.userdata = (arrContents[i].id);
			objButton.show(); 

			// Division에 컴포넌트가 생성될 때마다 Division의 Size을 재인식 시킨다.
			this.divGridPanel.resetScroll();

			// 생성되는 Grid의 Top의 위치
			this.iContentTop = this.iContentTop + 275;
			this.iTOTALCOUNTER++;

		}

		// Tab & Div 재귀 처리
		if (arrContents[i] instanceof Div || arrContents[i] instanceof Tab || arrContents[i] instanceof Tabpage) {
			this.fn_CheckTopForm(arrContents[i]);
		}

	}

}

/*-----------------+
|  엑셀 저장 처리  |
+------------------*/
this.fn_ExportExcel = function (obj) {

	var sGrid = "grd" + this.fnc_SubStr(obj.name, 3);

	//ExcelExportObjext를 초기화
	this.ExcelExportObject = null;
	this.ExcelExportObject = new ExcelExportObject("ExcelExportObject", this);
	
	var ret = this.ExcelExportObject.addExportItem(nexacro.ExportItemTypes.GRID, eval("this.divGridPanel."+sGrid), "Sheet1!A1","allband","allrecord","suppress","allstyle","image","","both","cellline");
	
	var objExportItem = this.ExcelExportObject.getExportItem(nexacro.ExportItemTypes.GRID, 0);
	objExportItem.set_exportimage("image");	
	this.ExcelExportObject.setExportItem(nexacro.ExportItemTypes.GRID, 0,objExportItem);  
	
    this.ExcelExportObject.set_exporttype(nexacro.ExportTypes.EXCEL2007);
    this.ExcelExportObject.set_exportfilename(obj.userdata + "_" + Eco.date.getMaskFormatString(new Date(), "yyyyMMddHHmmss"));
	//this.ExcelExportObject.set_exportfilename("ExcelExport_"+sGrid);

    this.ExcelExportObject.set_exporturl(application.GBL_HTTPURL + "/XExportImport");
    
	// var objExportItem = this.ExcelExportObject.getExportItem( nexacro.ExportItemTypes.GRID, 0 );
	// objExportItem.set_exceptstyle("background,background2");

    this.ExcelExportObject.exportData();
 
}]]></Script>
  </Form>
</FDL>
